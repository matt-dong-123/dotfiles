{
  "version": 3,
  "sources": ["../src/main.ts", "../src/rules.ts"],
  "sourcesContent": ["import { Clipboard, showHUD } from \"@raycast/api\";\nimport { rules } from \"./rules\";\n\n// detect all urls in text\nfunction findURLs(text: string): string[] {\n  const regex = /(https?:\\/\\/[^\\s]+)/g;\n  const matches = text.match(regex);\n  return matches ? matches : [];\n}\n\n// replace all urls in text\nfunction replaceURLs(text: string, newURLs: string[]): string {\n  const urls = findURLs(text);\n  for (const url of urls) {\n    text = text.replace(url, newURLs.shift() || url);\n  }\n  return text;\n}\n\n// remove some query params from url\nfunction removeQueryParams(url: string, allowParmas: string[]): string {\n  // find all query params\n  const urlParts = url.split(\"?\");\n  if (urlParts.length < 2) {\n    return url;\n  }\n  const query = urlParts[1].split(\"&\");\n\n  // if params is not empty, match params to remove\n  if (allowParmas.length > 0) {\n    const newQuery = query.filter((param) => allowParmas.includes(param.split(\"=\")[0]));\n    return `${urlParts[0]}?${newQuery.join(\"&\")}`;\n  }\n  // if params is empty, remove all query params\n  return urlParts[0];\n}\n\nexport default async function main() {\n  // get raw text from clipboard\n  const rawText = await Clipboard.readText();\n  // if clipboard is empty, exit\n  if (rawText === undefined) {\n    await showHUD(\"Clipboard is empty\");\n    return;\n  }\n\n  // detect urls in text\n  const urls = findURLs(rawText);\n  // if no url found, exit\n  if (urls.length === 0) {\n    await showHUD(\"No URL found\");\n    return;\n  }\n  console.log(\"raw urls\", urls);\n\n  // generate new urls without tracking parameters\n  const newURLs = [];\n  for (const url of urls) {\n    // convert shortened url to full url\n    // url = await convertURL(url);\n    // console.log(\"converted url\", url);\n    // find allow params in rules\n    const allowParams = rules.find((rule) => url.includes(rule.url))?.allowParams || [];\n    console.log(\"allow params\", allowParams);\n    // remove query params\n    const newURL = removeQueryParams(url, allowParams);\n    newURLs.push(newURL);\n  }\n  console.log(\"new urls\", newURLs);\n\n  // replace urls with new urls in text\n  const newText = replaceURLs(rawText, newURLs);\n  console.log(\"new text\", newText);\n\n  // finishing touches\n  await Clipboard.copy(newText);\n  await showHUD(\"Removed tracking parameters\");\n}\n", "interface Rule {\n  name: string;\n  url: string;\n  allowParams: string[];\n}\n\nconst rules: Rule[] = [\n  {\n    name: \"Google Search\",\n    url: \"google.com\",\n    allowParams: [\"q\", \"ie\"],\n  },\n  {\n    name: \"Baidu Search\",\n    url: \"baidu.com\",\n    allowParams: [\"wd\", \"ie\"],\n  },\n  {\n    name: \"Bing Search\",\n    url: \"bing.com\",\n    allowParams: [\"q\"],\n  },\n  {\n    name: \"Netease Music\",\n    url: \"music.163.com\",\n    allowParams: [\"id\"],\n  },\n  {\n    name: \"Youtube\",\n    url: \"youtube.com\",\n    allowParams: [\"v\", \"search_query\"],\n  },\n  {\n    name: \"Instagram Reel\",\n    url: \"instagram.com/reel\",\n    allowParams: [],\n  },\n];\n\nexport { rules };\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAmC,wBCMnC,IAAMC,EAAgB,CACpB,CACE,KAAM,gBACN,IAAK,aACL,YAAa,CAAC,IAAK,IAAI,CACzB,EACA,CACE,KAAM,eACN,IAAK,YACL,YAAa,CAAC,KAAM,IAAI,CAC1B,EACA,CACE,KAAM,cACN,IAAK,WACL,YAAa,CAAC,GAAG,CACnB,EACA,CACE,KAAM,gBACN,IAAK,gBACL,YAAa,CAAC,IAAI,CACpB,EACA,CACE,KAAM,UACN,IAAK,cACL,YAAa,CAAC,IAAK,cAAc,CACnC,EACA,CACE,KAAM,iBACN,IAAK,qBACL,YAAa,CAAC,CAChB,CACF,EDjCA,SAASC,EAASC,EAAwB,CACxC,IAAMC,EAAQ,uBACRC,EAAUF,EAAK,MAAMC,CAAK,EAChC,OAAOC,GAAoB,CAAC,CAC9B,CAGA,SAASC,EAAYH,EAAcI,EAA2B,CAC5D,IAAMC,EAAON,EAASC,CAAI,EAC1B,QAAWM,KAAOD,EAChBL,EAAOA,EAAK,QAAQM,EAAKF,EAAQ,MAAM,GAAKE,CAAG,EAEjD,OAAON,CACT,CAGA,SAASO,EAAkBD,EAAaE,EAA+B,CAErE,IAAMC,EAAWH,EAAI,MAAM,GAAG,EAC9B,GAAIG,EAAS,OAAS,EACpB,OAAOH,EAET,IAAMI,EAAQD,EAAS,CAAC,EAAE,MAAM,GAAG,EAGnC,GAAID,EAAY,OAAS,EAAG,CAC1B,IAAMG,EAAWD,EAAM,OAAQE,GAAUJ,EAAY,SAASI,EAAM,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,EAClF,MAAO,GAAGH,EAAS,CAAC,CAAC,IAAIE,EAAS,KAAK,GAAG,CAAC,EAC7C,CAEA,OAAOF,EAAS,CAAC,CACnB,CAEA,eAAOI,GAA8B,CAEnC,IAAMC,EAAU,MAAM,YAAU,SAAS,EAEzC,GAAIA,IAAY,OAAW,CACzB,QAAM,WAAQ,oBAAoB,EAClC,MACF,CAGA,IAAMT,EAAON,EAASe,CAAO,EAE7B,GAAIT,EAAK,SAAW,EAAG,CACrB,QAAM,WAAQ,cAAc,EAC5B,MACF,CACA,QAAQ,IAAI,WAAYA,CAAI,EAG5B,IAAMD,EAAU,CAAC,EACjB,QAAWE,KAAOD,EAAM,CAKtB,IAAMU,EAAcC,EAAM,KAAMC,GAASX,EAAI,SAASW,EAAK,GAAG,CAAC,GAAG,aAAe,CAAC,EAClF,QAAQ,IAAI,eAAgBF,CAAW,EAEvC,IAAMG,EAASX,EAAkBD,EAAKS,CAAW,EACjDX,EAAQ,KAAKc,CAAM,CACrB,CACA,QAAQ,IAAI,WAAYd,CAAO,EAG/B,IAAMe,EAAUhB,EAAYW,EAASV,CAAO,EAC5C,QAAQ,IAAI,WAAYe,CAAO,EAG/B,MAAM,YAAU,KAAKA,CAAO,EAC5B,QAAM,WAAQ,6BAA6B,CAC7C",
  "names": ["main_exports", "__export", "main", "__toCommonJS", "import_api", "rules", "findURLs", "text", "regex", "matches", "replaceURLs", "newURLs", "urls", "url", "removeQueryParams", "allowParmas", "urlParts", "query", "newQuery", "param", "main", "rawText", "allowParams", "rules", "rule", "newURL", "newText"]
}
